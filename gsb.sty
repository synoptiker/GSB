\usepackage{amsmath}
\usepackage{tikz}
\usepackage{ifthen}
\usepackage{xstring}
\usepackage{arrayjobx}

\usepackage{calc}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% INTERNAL CONSTANTS AND COUNTERS %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% default spacing between lines
\newcommand\defaultspace{0.2em}
\newcommand\hspacing{\hspace{\defaultspace}}

% parameters used for inline spacing
\newlength{\myboxheight}
\newlength{\myboxdepth}

% counts the indices used to identify elements, starts with 1, and therefore is always one more than the acutal number,
% this is done so we can iterate in a loop as long as i < indexcount, since =< is not possible with our whiledo command
\newcounter{indexcount}
\setcounter{indexcount}{1}

% counters used to determine height and depth for inline spacing (in \defaultspace)
\newcounter{heightcounter}
% standard height of a form (5 * \defaultspace = 1em)
\setcounter{heightcounter}{5}
\newcounter{depthcounter}
\setcounter{depthcounter}{0}

% counter to keep track how many text elements have been printed
\newcounter{textcounter}

% counter used for arithmetics in the reentrycountarray manipulation
\newcounter{RCAhelper}
% counters used in loops, needs to be (re-)set before usage
\newcounter{loop}
\newcounter{moop}

% counter used in a while loop
\newcounter{until}

% counters used in cross-height determination
\newcounter{maxheight}
\newcounter{currentheight}

% counter used in reentry-height determination
\newcounter{reentryheight}
\newcounter{reentryseen}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% INTERNAL ARRAYS - USED TO STORE STRUCTURAL INFORMATION %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% array that stores the order of each form element, i.e. start (l<index>), end (r<index>), re-rentry (r<index>),
% text (t<index>), re-rentry with text (n<index>) 
\newarray\orderarray
% counting the length of orderarray, starts with 1, and therefore is always one more than the acutal length,
% this is done so we can iterate in a loop as long as i < indexcount, since =< is not possible with our whiledo command
\newcounter{orderarraycount}
\setcounter{orderarraycount}{1}

% array to store any text used in the forms
\newarray\textarray
% array to retrieve the index of text given the position in the form
\newarray\textarrayindex
\newcounter{textarrayindexcount}
\setcounter{textarrayindexcount}{1}

% array to store text that is supposed to be written under a re-rentry
\newarray\rentextarray

%
\newarray\crossheightarray
%\newarray\crossheightarrayindex
%\newcounter{crossheightcount}
%\setcounter{crossheightcount}{0}
%\newcounter{crossheightarrayindexcount}
%\setcounter{crossheightarrayindexcount}{1}

\newarray\reentryseenarray
\newarray\reentryheightarray

% array used to count how many re-entries there are for each index, used for multi-re-entry feature
\newarray\reentrycountarray
% array used to keep track of how many re-entries of the same index have been set, used for multi-re-entry feature
\newarray\reentrynamearray

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% INTERNAL HELPER COMMANDS TO MANUPULATE ARRAYS %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%\newcommand\enterCHA[1]{%
%%	CHC[\arabic{crossheightcount}]
%	[#1,\thecrossheightcount]
%	\expandarrayelementtrue
%	\crossheightarray(#1)={\the\value{crossheightcount}}%
%	\expandarrayelementfalse
%	\stepcounter{crossheightcount}%
%%	\crossheightarray(#1)
%}

% commands to enter respective form elements into the orderarray
\newcommand\enterOAL[1]{\orderarray(\theorderarraycount)={l#1}\stepcounter{orderarraycount}%
%\enterCHA{#1}
}
\newcommand\enterOAR[1]{\orderarray(\theorderarraycount)={r#1}\stepcounter{orderarraycount}%
%	\addtocounter{crossheightcount}{-1}
}
\newcommand\enterOAT[1]{\orderarray(\theorderarraycount)={t#1}\stepcounter{orderarraycount}}
\newcommand\enterOAE[1]{\orderarray(\theorderarraycount)={e#1}\stepcounter{orderarraycount}%
	\stepRCA{#1}}
\newcommand\enterOAN[1]{\orderarray(\theorderarraycount)={n#1}\stepcounter{orderarraycount}}

% command to enter text into the textarray
\newcommand\enterTA[2]{\textarray(#2)={#1}%
	\textarrayindex(\thetextarrayindexcount)={#2}\stepcounter{textarrayindexcount}}

% initializes or increments RCA entries of the corresponding index
\newcommand\stepRCA[1]{%
	\expandarrayelementtrue%
	\checkreentrycountarray(#1)%
	\ifemptydata%then
%		\ifemptydata
		\reentrycountarray(#1)={1}
		\reentrynamearray(#1)={0}
	\else
		\setcounter{RCAhelper}{\cachedata}
		\stepcounter{RCAhelper}
		\reentrycountarray(#1)={\theRCAhelper}
	\fi
	\expandarrayelementfalse%
}

% checks if given argument is an integer
\newcommand*{\IsInteger}[3]{%
	\IfStrEq{#1}{ }{%
		#3% is a blank string
	}{%
		\IfInteger{#1}{#2}{#3}%
	}%
}%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% USER COMMANDS TO ENCODE FORMS %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% command to place the start and end of a cross without text, usage: \lof{<content>}{<index>}
\newcommand\lof[2]{\enterOAL{#2}#1\enterOAR{#2}%
	\stepcounter{heightcounter}%
	\stepcounter{indexcount}}

% command to place the start and end of a cross with text, usage: \lofc{<content>}{<text>}{<index>}
\newcommand\lofc[3]{\enterOAL{#3}#1\enterTA{#2}{#3}\enterOAT{#3}\enterOAR{#3}%
	\stepcounter{heightcounter}%
	\stepcounter{indexcount}}

% command to place the start and end of a cross with text, including the possibily of placing crosses or re-entries to
% the right side of the text usage: \lofc{<content>}{<text>}{<content>}{<index>}
\newcommand\loflr[4]{\enterOAL{#4}#1\enterTA{#2}{#4}\enterOAT{#4}#3\enterOAR{#4}%
	\stepcounter{heightcounter}%
	\stepcounter{indexcount}}

% command to place plain text, without a new cross, usage: \loftext{<text>}{<index>}
\newcommand\loftext[2]{\enterTA{#1}{#2}\enterOAT{#2}}

% command to place a re-rentry at the current location, usage: \re{<index>}
\newcommand\re[1]{\enterOAE{#1}\stepcounter{depthcounter}}

% command to place a re-rentry with text at the current location, usage: \ren{<text>}{<index>}
\newcommand\ren[2]{\enterOAN{#2}\rentextarray(#2)={#1}\stepcounter{depthcounter}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% TEST COMMANDS FOR PRINTING INTERNAL INFORMATION %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% testing function that prints out the content of orderarray
\newcommand\printOA{%
	\footnote{\text{printOA: }
	\setcounter{loop}{1}
	\whiledo{\value{loop} < \theorderarraycount}%
	{%
		\orderarray(\theloop)
		\stepcounter{loop}%
	}
	\setcounter{loop}{0}
	}
}

% testing function that prints out the content of textarray
\newcommand\printTA{%
	\footnote{\text{printTA: }
	\setcounter{loop}{1}
	\whiledo{\value{loop} < \thetextarrayindexcount}%
	{%
		\checktextarrayindex(\theloop)%
		\text{(}\cachedata\text{, }\textarray(\cachedata)\text{)}
		\stepcounter{loop}%
	}
	\setcounter{loop}{0}
	}
}

% testing function that prints out the content of crossheightarray
\newcommand\printCHA[1]{%
printCHA:
\setcounter{loop}{1}
\whiledo{\value{loop} < #1}%
{%
	\checkcrossheightarray(\theloop)
	\text{(\theloop, \cachedata)}
	\stepcounter{loop}%
}
\setcounter{loop}{0}
}

% testing function that prints out the content of reentrycountarray
\newcommand\printRCA{%
	\footnote{\text{printRCA: }
	\setcounter{loop}{1}
	\whiledo{\value{loop} < \theindexcount}%
	{%
		\checkreentrycountarray(\theloop)
		\text{(}\theloop\text{, }\cachedata\text{)}
		\stepcounter{loop}%
	}
	\setcounter{loop}{1}
	}
}

% testing function that prints out the content of reentrynamearray
\newcommand\printRNA{%
	\footnote{\text{printRNA: }
		\setcounter{loop}{1}
		\whiledo{\value{loop} < \theindexcount}%
		{%
			\checkreentrynamearray(\theloop)
			\text{(}\theloop\text{, }\cachedata\text{)}
			\stepcounter{loop}%
		}
		\setcounter{loop}{1}
	}
}

% testing function that prints out the content of reentryheightarray
\newcommand\printRHA{%
	\footnote{\text{printRHA: }
		\setcounter{loop}{1}
		\whiledo{\value{loop} < \theindexcount}%
		{%
			\checkreentryheightarray(\theloop)
			\text{(}\theloop\text{, }\cachedata\text{)}
			\stepcounter{loop}%
		}
		\setcounter{loop}{1}
	}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% INTERNAL COMMANDS FOR TIKZ NODE CREATION AND MANUPULATION %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% command that creates a tikz node named #1 at the current location, shifted 1em upwards, which is the typical line 
% height
\newcommand\ncoord[2][0,1em]{%
	\tikz[remember picture,overlay]{\path (#1) coordinate (#2);}%
}

% command to check whether there exists a tikz node given the name
\makeatletter
\long\def\ifnodedefined#1#2#3{%
	\@ifundefined{pgf@sh@ns@#1}{#3}{#2}%
}
\makeatother

% command to delete a tikz node
\makeatletter
\newcommand\aeundefinenode[1]{%%
	\expandafter\ifx\csname pgf@sh@ns@#1\endcsname\relax
	\else
	\typeout{===>Undefining node "#1"}%%
	\global\expandafter\let\csname pgf@sh@ns@#1\endcsname\relax
	\fi
}
\makeatother

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% MAIN FUNCTION - draws a formula from the created   %%%
%%% arrays, and resets them at the end, so a new       %%%
%%% formula can be created this command will be used   %%%
%%% in a math environment and therefore no empty lines %%%
%%% (and other syntax that throws errors in math       %%%
%%% environment should be used)                        %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand\formdraw{%
	% intiating counters
	\setcounter{loop}{1}
	\setcounter{textcounter}{1}
%
	% run through the orderarray, create corresponding tikz nodes, with \hspacing inbetween them, or in the case of a 
	% text element, print that text with \hspacing in front and after
	\whiledo{\value{loop} < \theorderarraycount}{%
		\checkorderarray(\theloop)%
		\StrLeft{\cachedata}{1}[\firstletter]%
		\StrGobbleLeft{\cachedata}{1}[\lastletters]%
		\IfStrEq{l}{\firstletter}{%true
			\ncoord{l\lastletters}%
		}{%false
		}%
		\IfStrEq{r}{\firstletter}{%true
			\ncoord{r\lastletters}\hspacing%
		}{%false
		}%
		\IfStrEq{e}{\firstletter}{%true
			\checkreentrynamearray(\lastletters)
			\setcounter{RCAhelper}{\cachedata}
			\stepcounter{RCAhelper}
			\expandarrayelementtrue
			\reentrynamearray(\lastletters)={\theRCAhelper}
			\expandarrayelementfalse
			\ncoord[0,\defaultspace]{e\lastletters\theRCAhelper}\hspacing%
		}{%false
		}%
		\IfStrEq{t}{\firstletter}{%true
%		\checktextarray(\thetextcounter)%
		\checktextarray(\lastletters)%
		\hspacing\cachedata\hspacing%
		\stepcounter{textcounter}%
		}{%false
		}%
		\IfStrEq{n}{\firstletter}{%true
			\ncoord[0,\defaultspace]{n\lastletters}\hspacing%
		}{%false
		}%
		\stepcounter{loop}%
	}%
%
	% reset counter
	\setcounter{loop}{1}
	%
	% run through Orderarray to determine the needed height for each cross
	\whiledo{\value{loop} < \theorderarraycount}{%
	\checkorderarray(\theloop)%
	\StrLeft{\cachedata}{1}[\firstletter]%
	\StrGobbleLeft{\cachedata}{1}[\lastletters]%
	\IfStrEq{l}{\firstletter}{%true
		\setcounter{moop}{\value{loop}}
		\setcounter{maxheight}{0}
		\setcounter{currentheight}{-1}
		\whiledo{\value{moop} < \theorderarraycount}{%
			\checkorderarray(\themoop)%
			\StrLeft{\cachedata}{1}[\firstletter]
			\IfStrEq{l}{\firstletter}{%true
				\stepcounter{currentheight}
			}{%false
			}
			\IfStrEq{r}{\firstletter}{%true
				\addtocounter{currentheight}{-1}
			}{%false
			}
			\ifnum\value{currentheight}>\value{maxheight}{%
				\setcounter{maxheight}{\thecurrentheight}
			}\fi%
			\stepcounter{moop}
		}%
		\expandarrayelementtrue
		\crossheightarray(\lastletters)={\themaxheight}
		\expandarrayelementfalse
	}{%false
	}%
	\stepcounter{loop}
	}%
	% reset counters
	\setcounter{loop}{1}
	\setcounter{moop}{1}
	\setcounter{maxheight}{0}
	\setcounter{currentheight}{0}
%
	% initialize reentryseenarray
	\whiledo{\value{loop} < \theorderarraycount}{%
	\reentryseenarray(\theloop)={0}
	\stepcounter{loop}
	}%
	\setcounter{loop}{1}
%
	% run through Orderarray to determine the neede height for each re-entry
	\setcounter{reentryheight}{0}
	\setcounter{reentryseen}{0}
	\whiledo{\value{loop} < \theorderarraycount}{%
	\checkorderarray(\theloop)%
	\StrLeft{\cachedata}{1}[\firstletter]%
	\StrGobbleLeft{\cachedata}{1}[\lastletters]%
	\IfStrEq{r}{\firstletter}{%true
%		test
		\checkreentrycountarray(\lastletters)
		\IsInteger{\cachedata}{%then
			\ifnum\cachedata>0{%then
				\checkreentryseenarray(\lastletters)
				\StrGobbleLeft{\cachedata}{0}[\REseen]
				\checkreentrycountarray(\lastletters)
				\StrGobbleLeft{\cachedata}{0}[\REindex]
				\ifnum\REseen=0{%then
					\stepcounter{reentryheight}
					\expandarrayelementtrue
					\reentryheightarray(\lastletters)={\thereentryheight}
					\checkreentryseenarray(\lastletters)
					\setcounter{reentryseen}{\cachedata}
					\stepcounter{reentryseen}
					\reentryseenarray(\lastletters)={\thereentryseen}
					\expandarrayelementfalse
				}\else{%
					\ifnum\thereentryseen<\REindex{%then
						\expandarrayelementtrue
						\checkreentryseenarray(\lastletters)
						\setcounter{reentryseen}{\cachedata}
						\stepcounter{reentryseen}
						\reentryseenarray(\lastletters)={\thereentryseen}
						\expandarrayelementfalse
					}\else{%
						\addtocounter{reentryheight}{-1}
					}\fi%
				}\fi%
			}\fi%
		}{%else
		}
	}{%false
	}%
	\IfStrEq{e}{\firstletter}{%true
		\checkreentryseenarray(\lastletters)
		\StrGobbleLeft{\cachedata}{0}[\REseen]
		\checkreentrycountarray(\lastletters)
		\StrGobbleLeft{\cachedata}{0}[\REindex]
		\ifnum\REseen=0{%then
			\stepcounter{reentryheight}
			\expandarrayelementtrue
			\reentryheightarray(\lastletters)={\thereentryheight}
			\checkreentryseenarray(\lastletters)
			\setcounter{reentryseen}{\cachedata}
			\stepcounter{reentryseen}
			\reentryseenarray(\lastletters)={\thereentryseen}
			\expandarrayelementfalse
		}\else{%
			\ifnum\thereentryseen<\REindex{%then
				\expandarrayelementtrue
				\checkreentryseenarray(\lastletters)
				\setcounter{reentryseen}{\cachedata}
				\stepcounter{reentryseen}
				\reentryseenarray(\lastletters)={\thereentryseen}
				\expandarrayelementfalse
			}\else{%
				\addtocounter{reentryheight}{-1}
			}\fi%
		}\fi%
	}{%false
	}%
	\stepcounter{loop}
	}%
	% reset counters
	\setcounter{loop}{1}
	\setcounter{reentryheight}{0}
	\setcounter{reentryseen}{0}
%
	% check if there is at least one (left) node defined
	\ifnodedefined{l\theloop}{%true
		\setcounter{until}{1}
	}{%false
		\setcounter{until}{0}}
%
	% draw a tikz overlay around the printed text, creating the given formula
	% going through the node indices, we first draw from the left node (l<index>) to the right node (r<index>), and 
	% draw down 1.2em (as the nodes are created at +1em). It is then checked whether re-rentries or re-rentries with
	% text exist, which are then drawn starting again from the top right node (this is easier than creating a starting % point where we left off).
	% After each loop, the tikz nodes that have been used are being deleted.
	% The loop exits when there are no more left nodes.
	\tikz[overlay,remember picture] {
		\whiledo{\value{until} > 0}%
		{%
			\ifnodedefined{e\theloop1}{
				\checkcrossheightarray(\theloop)
				
				\draw[-] ([yshift=\cachedata * \defaultspace]l\theloop)
				-| ([yshift=\cachedata * \defaultspace]r\theloop)
				-| (r\theloop)
				;
				\setcounter{moop}{0}
				\checkreentryheightarray(\theloop)
				\StrGobbleLeft{\cachedata}{0}[\REheight]
				\checkreentrycountarray(\theloop)
				\whiledo{\value{moop} < \cachedata}{%
					\stepcounter{moop}
					\draw[-] (r\theloop)
					-| ++(0,\REheight * -\defaultspace)
					-| ++(0,-1.0em) -| (e\theloop\themoop)
					;
				}
			}{
				\checkcrossheightarray(\theloop)
				\draw[-] ([yshift=\cachedata * \defaultspace]l\theloop)
				-| ([yshift=\cachedata * \defaultspace]r\theloop)
				-| (r\theloop)
				-| ++(0,-\defaultspace)
				-| ++(0,-0.8em)
				;
			}	
			\ifnodedefined{n\theloop}{
				\draw[-] (r\theloop)
				-| ++(0,\theloop * -\defaultspace)
				-| ++(0,-1.0em) -| (n\theloop) node[below, near start] {\rentextarray(\theloop)}
				;
			}{}
			\aeundefinenode{l\theloop}
			\aeundefinenode{r\theloop}
			\ifnodedefined{e\theloop1}{%then
				\setcounter{moop}{0}
				\checkreentrycountarray(\theloop)
				\whiledo{\value{moop} < \cachedata}{%
					\stepcounter{moop}
					\aeundefinenode{e\theloop\themoop}
				}%
			}
			\aeundefinenode{n\theloop}
%
			% Step up the counter and see if there exists a left node for the current index, if not exit the loop
			\stepcounter{loop}
			\ifnodedefined{l\theloop}{%
				\setcounter{until}{1}}{%
				\setcounter{until}{0}}
		}
	}
% clear all the used arrays and counters for next usage
\clrarray{textarray}()
\clrarray{textarrayindex}()
\clrarray{textgap}()
\clrarray{orderarray}()
\clrarray{crossheightarray}()
% I don't know why this is necessary here, but not in with any other arrays...
\setcounter{loop}{1}
\whiledo{\value{loop} < \theindexcount}{%
	\clrarray{reentrycountarray}(\theloop)
	\stepcounter{loop}
}
\setcounter{loop}{1}
\whiledo{\value{loop} < \theindexcount}{%
	\clrarray{reentryseenarray}(\theloop)
	\stepcounter{loop}
}
\setcounter{loop}{1}
\whiledo{\value{loop} < \theindexcount}{%
\clrarray{reentryheightarray}(\theloop)
\stepcounter{loop}
}
\setcounter{textarrayindexcount}{1}
\setcounter{orderarraycount}{1}
\setcounter{loop}{1}
\setcounter{textcounter}{1}
\setcounter{indexcount}{1}
\setcounter{heightcounter}{5}
\setcounter{depthcounter}{0}
\setcounter{maxheight}{1}
\setcounter{currentheight}{1}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% ENVIRONMENTS IN WHICH FORMS CAN BE DRAWN %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% single line equation environment to display LoF formulas
\newenvironment{form}{\[}{\formdraw\]}

% for inline use in equation environments, creates a box with appropriate height around the formula, example:
%	\begin{align}
%		f = \begin{lofeqn} \loflr{}{a}{}{1} \end{lofeqn}\\
%		f = \begin{lofeqn} \loflr{}{b}{}{1} \end{lofeqn}
%	\end{align}
\newenvironment{formeqn}{}{%
	\setlength{\myboxheight}{\theheightcounter em}
	\setlength{\myboxdepth}{\thedepthcounter em}
	\raisebox{0pt}[0.2\myboxheight][0.4\myboxdepth]{\formdraw}}

% inline math environment to display inline LoF formulas, creates a box with appropriate height around the formula
\newenvironment{forminline}{$}{$%
	\setlength{\myboxheight}{\theheightcounter em}
	\setlength{\myboxdepth}{\thedepthcounter em}
	\raisebox{0pt}[0.2\myboxheight][0.4\myboxdepth]{$\formdraw$}}
