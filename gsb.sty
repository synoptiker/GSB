\usepackage{amsmath}
\usepackage{tikz}
\usepackage{ifthen}
\usepackage{xstring}
\usepackage{arrayjobx}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% INTERNAL CONSTANTS AND COUNTERS %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% default spacing between lines
\newcommand\defaultspace{0.2em}
\newcommand\hspacing{\hspace{\defaultspace}}

% parameters used for inline spacing
\newlength{\myboxheight}
\newlength{\myboxdepth}

% counters used to determine height and depth for inline spacing (in \defaultspace)
\newcounter{heightcounter}
% standard height of a form (5 * \defaultspace = 1em)
\setcounter{heightcounter}{5}
\newcounter{depthcounter}
\setcounter{depthcounter}{0}

% counter used in loops, needs to be (re-)set before usage
\newcounter{loop}

% counter to keep track how many text elements have been printed
\newcounter{textcounter}

% counter used in a while loop
\newcounter{until}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% INTERNAL ARRAYS - USED TO STORE STRUCTURAL INFORMATION %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% array that stores the order of each form element, i.e. start (l<index>), end (r<index>), re-rentry (r<index>),
% text (t<index>), re-rentry with text (n<index>) 
\newarray\orderarray
\newcounter{orderarraycount}
\setcounter{orderarraycount}{1}

% array to store any text used in the forms
\newarray\textarray
% array to retrieve the index of text given the position in the form
\newarray\textarrayindex
\newcounter{textarrayindexcount}
\setcounter{textarrayindexcount}{1}

% array to store text that is supposed to be written under a re-rentry
\newarray\rentextarray

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% INTERNAL HELPER COMMANDS TO MANUPULATE ARRAYS %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% commands to enter respective form elements into the orderarray
\newcommand\enterOAL[1]{\orderarray(\theorderarraycount)={l#1}\stepcounter{orderarraycount}}
\newcommand\enterOAR[1]{\orderarray(\theorderarraycount)={r#1}\stepcounter{orderarraycount}}
\newcommand\enterOAT[1]{\orderarray(\theorderarraycount)={t#1}\stepcounter{orderarraycount}}
\newcommand\enterOAE[1]{\orderarray(\theorderarraycount)={e#1}\stepcounter{orderarraycount}}
\newcommand\enterOAN[1]{\orderarray(\theorderarraycount)={n#1}\stepcounter{orderarraycount}}

% command to enter text into the textarray
\newcommand\enterTA[2]{\textarray(#2)={#1}%
	\textarrayindex(\thetextarrayindexcount)={#2}\stepcounter{textarrayindexcount}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% USER COMMANDS TO ENCODE FORMS %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% command to place the start and end of a cross without text, usage: \lof{<content>}{<index>}
\newcommand\lof[2]{\enterOAL{#2}#1\enterOAR{#2}%
	\stepcounter{heightcounter}}

% command to place the start and end of a cross with text, usage: \lofc{<content>}{<text>}{<index>}
\newcommand\lofc[3]{\enterOAL{#3}#1\enterTA{#2}{#3}\enterOAT{#3}\enterOAR{#3}%
	\stepcounter{heightcounter}}

% command to place the start and end of a cross with text, including the possibily of placing crosses or re-entries to
% the right side of the text usage: \lofc{<content>}{<text>}{<content>}{<index>}
\newcommand\loflr[4]{\enterOAL{#4}#1\enterTA{#2}{#4}\enterOAT{#4}#3\enterOAR{#4}%
\stepcounter{heightcounter}}

% command to place plain text, without a new cross, usage: \loftext{<text>}{<index>}
\newcommand\loftext[2]{\enterTA{#1}{#2}\enterOAT{#2}}

% command to place a re-rentry at the current location, usage: \re{<index>}
\newcommand\re[1]{\enterOAE{#1}\stepcounter{depthcounter}}

% command to place a re-rentry with text at the current location, usage: \ren{<text>}{<index>}
\newcommand\ren[2]{\enterOAN{#2}\rentextarray(#2)={#1}\stepcounter{depthcounter}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% TEST COMMANDS FOR PRINTING INTERNAL INFORMATION %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% testing function that prints out the content of orderarray
\newcommand\printOA{%
	printOA:\\
	\setcounter{loop}{1}
	\whiledo{\value{loop} < \theorderarraycount}%
	{%
		\orderarray(\theloop)
		\stepcounter{loop}%
	}
	\setcounter{loop}{0}	
}

% testing function that prints out the content of textarray
\newcommand\printTA{%
	printTA:
	\setcounter{loop}{1}
	\whiledo{\value{loop} < \thetextarrayindexcount}%
	{%
		\checktextarrayindex(\theloop)%
		\text{(}\cachedata\text{, }\textarray(\cachedata)\text{)}
		\stepcounter{loop}%
	}
	\setcounter{loop}{0}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% INTERNAL COMMANDS FOR TIKZ NODE CREATION AND MANUPULATION %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% command that creates a tikz node named #1 at the current location, shifted 1em upwards, which is the typical line 
% height
\newcommand\ncoord[2][0,1em]{%
	\tikz[remember picture,overlay]{\path (#1) coordinate (#2);}%
}

% command to check whether there exists a tikz node given the name
\makeatletter
\long\def\ifnodedefined#1#2#3{%
	\@ifundefined{pgf@sh@ns@#1}{#3}{#2}%
}
\makeatother

% command to delete a tikz node
\makeatletter
\newcommand\aeundefinenode[1]{%%
	\expandafter\ifx\csname pgf@sh@ns@#1\endcsname\relax
	\else
	\typeout{===>Undefining node "#1"}%%
	\global\expandafter\let\csname pgf@sh@ns@#1\endcsname\relax
	\fi
}
\makeatother

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% MAIN FUNCTION - draws a formula from the created   %%%
%%% arrays, and resets them at the end, so a new       %%%
%%% formula can be created this command will be used   %%%
%%% in a math environment and therefore no empty lines %%%
%%% (and other syntax that throws errors in math       %%%
%%% environment should be used)                        %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand\formdraw{%
	% intiating counters
	\setcounter{loop}{1}
	\setcounter{textcounter}{1}
%
	% run through the orderarray, create corresponding tikz nodes, with \hspacing inbetween them, or in the case of a 
	% text element, print that text with \hspacing in front and after
	\whiledo{\value{loop} < \theorderarraycount}{%
		\checkorderarray(\theloop)%
		\StrLeft{\cachedata}{1}[\firstletter]%
		\StrGobbleLeft{\cachedata}{1}[\lastletters]%
		\IfStrEq{l}{\firstletter}{%true
			\ncoord{l\lastletters}%
		}{%false
		}%
		\IfStrEq{r}{\firstletter}{%true
			\ncoord{r\lastletters}\hspacing%
		}{%false
		}%
		\IfStrEq{e}{\firstletter}{%true
			\ncoord[0,\defaultspace]{e\lastletters}\hspacing%
		}{%false
		}%
		\IfStrEq{t}{\firstletter}{%true
%		\checktextarray(\thetextcounter)%
		\checktextarray(\lastletters)%
		\hspacing\cachedata\hspacing%
		\stepcounter{textcounter}%
		}{%false
		}%
		\IfStrEq{n}{\firstletter}{%true
			\ncoord[0,\defaultspace]{n\lastletters}\hspacing%
		}{%false
		}%
		\stepcounter{loop}%
	}%
%
	% reset counter
	\setcounter{loop}{1}
%
	% check if there is at least one (left) node defined
	\ifnodedefined{l\theloop}{%true
		\setcounter{until}{1}
	}{%false
		\setcounter{until}{0}}
%
	% draw a tikz overlay around the printed text, creating the given formula
	% going through the node indices, we first draw from the left node (l<index>) to the right node (r<index>), and 
	% draw down 1.2em (as the nodes are created at +1em). It is then checked whether re-rentries or re-rentries with
	% text exist, which are then drawn starting again from the top right node (this is easier than creating a starting % point where we left off).
	% After each loop, the tikz nodes that have been used are being deleted.
	% The loop exits when there are no more left nodes.
	\tikz[overlay,remember picture] {
		\whiledo{\value{until} > 0}%
		{%
			\draw[-] ([yshift=(\theloop-1) * \defaultspace]l\theloop)
			-| ([yshift=(\theloop-1) * \defaultspace]r\theloop)
			-| ++([yshift=(\theloop-1) * -\defaultspace]0em,0em);
			\ifnodedefined{e\theloop}{
				\draw[-] (r\theloop)
				-| ++(0,\theloop * -\defaultspace)
				-| ++(0,-1.0em) -| (e\theloop)
				;
			}{
				\draw[-] (r\theloop)
				-| ++(0,-\defaultspace)
				-| ++(0,-0.8em)
				;
			}	
			\ifnodedefined{n\theloop}{
				\draw[-] (r\theloop)
				-| ++(0,\theloop * -\defaultspace)
				-| ++(0,-1.0em) -| (n\theloop) node[below, near start] {\rentextarray(\theloop)}
				;
			}{}
			\aeundefinenode{l\theloop}
			\aeundefinenode{r\theloop}
			\aeundefinenode{e\theloop}
			\aeundefinenode{n\theloop}
%
			% Step up the counter and see if there exists a left node for the current index, if not exit the loop
			\stepcounter{loop}
			\ifnodedefined{l\theloop}{%
				\setcounter{until}{1}}{%
				\setcounter{until}{0}}
		}
	}
% clear all the used arrays and counters for next usage
\clrarray{textarray}()
\clrarray{textarrayindex}()
\clrarray{textgap}()
\clrarray{orderarray}()
\setcounter{textarrayindexcount}{1}
\setcounter{orderarraycount}{1}
\setcounter{loop}{1}
\setcounter{textcounter}{1}
\setcounter{heightcounter}{5}
\setcounter{depthcounter}{0}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% ENVIRONMENTS IN WHICH FORMS CAN BE DRAWN %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% single line equation environment to display LoF formulas
\newenvironment{form}{\[}{\formdraw\]}

% for inline use in equation environments, creates a box with appropriate height around the formula, example:
%	\begin{align}
%		f = \begin{lofeqn} \loflr{}{a}{}{1} \end{lofeqn}\\
%		f = \begin{lofeqn} \loflr{}{b}{}{1} \end{lofeqn}
%	\end{align}
\newenvironment{formeqn}{}{%
	\setlength{\myboxheight}{\theheightcounter em}
	\setlength{\myboxdepth}{\thedepthcounter em}
	\raisebox{0pt}[0.2\myboxheight][0.4\myboxdepth]{\formdraw}}

% inline math environment to display inline LoF formulas, creates a box with appropriate height around the formula
\newenvironment{forminline}{$}{$%
	\setlength{\myboxheight}{\theheightcounter em}
	\setlength{\myboxdepth}{\thedepthcounter em}
	\raisebox{0pt}[0.2\myboxheight][0.4\myboxdepth]{$\formdraw$}}
